#!/usr/bin/env python

import re
from optparse import OptionParser

def trunc(s, d, n1=0, n2=1):
    return d.join(s.split(d)[n1:n2])

def process(x):
    if "Conflict of interest statement:" in trunc(x,"\n\n",1,2):
        if "Collaborators" in trunc(x,"\n\n",4,5):
            if "Author information" in trunc(x,"\n\n",5,6):
                if "Comment in" in trunc(x,"\n\n",6,7) or "Comment on" in trunc(x,"\n\n",6,7) or "Erratum in" in trunc(x,"\n\n",6,7) or "Erratum for" in trunc(x,"\n\n",6,7):
                    if "Comment in" in trunc(x,"\n\n",7,8) or "Comment on" in trunc(x,"\n\n",7,8) or "Erratum in" in trunc(x,"\n\n",7,8) or "Erratum for" in trunc(x,"\n\n",7,8):
                        return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",8,9).replace("\n"," "))
                    else:
                        return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",7,8).replace("\n"," "))
                else:
                    return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",6,7).replace("\n"," "))
            elif "Comment in" in trunc(x,"\n\n",5,6) or "Comment on" in trunc(x,"\n\n",5,6) or "Erratum in" in trunc(x,"\n\n",5,6) or "Erratum for" in trunc(x,"\n\n",5,6):
                if "Comment in" in trunc(x,"\n\n",6,7) or "Comment on" in trunc(x,"\n\n",6,7) or "Erratum in" in trunc(x,"\n\n",6,7) or "Erratum for" in trunc(x,"\n\n",6,7):
                    return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",7,8).replace("\n"," "))
                else:
                    return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",6,7).replace("\n"," "))
            else:
                return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",5,6).replace("\n"," "))
        elif "Author information" in trunc(x,"\n\n",4,5):
            if "Comment in" in trunc(x,"\n\n",5,6) or "Comment on" in trunc(x,"\n\n",5,6) or "Erratum in" in trunc(x,"\n\n",5,6) or "Erratum for" in trunc(x,"\n\n",5,6):
                if "Comment in" in trunc(x,"\n\n",6,7) or "Comment on" in trunc(x,"\n\n",6,7) or "Erratum in" in trunc(x,"\n\n",6,7) or "Erratum for" in trunc(x,"\n\n",6,7):
                    return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",7,8).replace("\n"," "))
                else:
                    return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",6,7).replace("\n"," "))
            else:
                 return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",5,6).replace("\n"," "))
        elif "Comment in" in trunc(x,"\n\n",4,5) or "Comment on" in trunc(x,"\n\n",4,5) or "Erratum in" in trunc(x,"\n\n",4,5) or "Erratum for" in trunc(x,"\n\n",4,5):
            if "Comment in" in trunc(x,"\n\n",5,6) or "Comment on" in trunc(x,"\n\n",5,6) or "Erratum in" in trunc(x,"\n\n",5,6) or "Erratum for" in trunc(x,"\n\n",5,6):
                return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",6,7).replace("\n"," "))
            else:
                return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",5,6).replace("\n"," "))
        else:
            return (trunc(x,"\n\n",3,4).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",1,2).split("!!!!")[1],". ",2,3))),trunc(x,"\n\n",2,3).replace("\n"," "),trunc(x,"\n\n",4,5).replace("\n"," "))
    else:
        if "Collaborators" in trunc(x,"\n\n",3,4):
            if "Author information" in trunc(x,"\n\n",4,5):
                if "Comment in" in trunc(x,"\n\n",5,6) or "Comment on" in trunc(x,"\n\n",5,6) or "Erratum in" in trunc(x,"\n\n",5,6) or "Erratum for" in trunc(x,"\n\n",5,6):
                    if "Comment in" in trunc(x,"\n\n",6,7) or "Comment on" in trunc(x,"\n\n",6,7) or "Erratum in" in trunc(x,"\n\n",6,7) or "Erratum for" in trunc(x,"\n\n",6,7):
                        return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",7,8).replace("\n"," "))
                    else:
                        return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",6,7).replace("\n"," "))
                else:
                    return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",5,6).replace("\n"," "))
            elif "Comment in" in trunc(x,"\n\n",4,5) or "Comment on" in trunc(x,"\n\n",4,5) or "Erratum in" in trunc(x,"\n\n",4,5) or "Erratum for" in trunc(x,"\n\n",4,5):
                if "Comment in" in trunc(x,"\n\n",5,6) or "Comment on" in trunc(x,"\n\n",5,6) or "Erratum in" in trunc(x,"\n\n",5,6) or "Erratum for" in trunc(x,"\n\n",5,6):
                    return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",5,6).replace("\n"," "))
                else:
                    return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",5,6).replace("\n"," "))
            else:
                 return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",4,5).replace("\n"," "))
        elif "Author information" in trunc(x,"\n\n",3,4):
            if "Comment in" in trunc(x,"\n\n",4,5) or "Comment on" in trunc(x,"\n\n",4,5) or "Erratum in" in trunc(x,"\n\n",4,5) or "Erratum for" in trunc(x,"\n\n",4,5):
                if "Comment in" in trunc(x,"\n\n",5,6) or "Comment on" in trunc(x,"\n\n",5,6) or "Erratum in" in trunc(x,"\n\n",5,6) or "Erratum for" in trunc(x,"\n\n",5,6):
                    return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",6,7).replace("\n"," "))
                else:
                    return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",5,6).replace("\n"," "))
            else:
                return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",4,5).replace("\n"," "))
        elif "Comment in" in trunc(x,"\n\n",3,4) or "Comment on" in trunc(x,"\n\n",3,4) or "Erratum in" in trunc(x,"\n\n",3,4) or "Erratum for" in trunc(x,"\n\n",3,4):
            if "Comment in" in trunc(x,"\n\n",4,5) or "Comment on" in trunc(x,"\n\n",4,5) or "Erratum in" in trunc(x,"\n\n",4,5) or "Erratum for" in trunc(x,"\n\n",4,5):
                return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",5,6).replace("\n"," "))
            else:
                return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",4,5).replace("\n"," "))
        else:
             return (trunc(x,"\n\n",2,3).replace(',','!').replace('(','!').split("!")[0],re.sub(":.*","",re.sub(";.*","",trunc(trunc(x,"\n\n",0,1),". ",2,3))),trunc(x,"\n\n",1,2).replace("\n"," "),trunc(x,"\n\n",3,4).replace("\n"," "))

def pubmed(file):
    data=open(file, "r").read()
    pmid=data.split("PMID: ")
    pmid=pmid[1:len(pmid)]
    pmid=[(x.replace("[Indexed for MEDLINE]", "")).replace(" ","") for x in pmid]
    pmid=[x.split("\n")[0] for x in pmid]
    info=data.split("PMID: ")
    info=[x.replace("\n\n\n"," !!!! ") for x in info]
    info=info[0:(len(info)-1)]
    combined=list(zip(pmid,info))
    combined=[x for x in combined if ("[Article in" in x[1])==False]
    combined=[x for x in combined if ("RETRACTED" in x[1])==False]
    combined=[x for x in combined if (" Chapter " in x[1])==False]
    pmid=[x[0] for x in combined]
    info=[x[1] for x in combined]
    info=[process(x) for x in info]
    dataset=list(zip(pmid,info))
    dataset=[(x[0],x[1][0],x[1][1].split(" ")[0],x[1][1],x[1][2],re.sub(" !!!!.*","",x[1][3])) for x in dataset]
    return dataset

parser = OptionParser()
parser.add_option("-f", "--file", dest="filename", default="pubmed_result.txt", help="input pubmed results file", metavar="FILE")

(options, args) = parser.parse_args()

filename = options.filename

data = pubmed(filename)

f = open(filename.replace(".txt", ".tsv"), 'w')
f.write('\t'.join(['PMID','Author','Year','Date','Title','Abstract'])+'\n')
for row in data:
    f.write('\t'.join(str(x) for x in row)+'\n')

