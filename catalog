#!/bin/bash

FILES_DIR=../files
## A copy of the FILES_DIR folder is here: /projects/MRC-IEU/research/projects/ieu1/wp2/004/working/data/data-files-for-ewascatalog2

WEBSITE_DIR=../running
## Base directory of the website directory

## Database settings can be found in the settings.env file
##   /projects/MRC-IEU/research/projects/ieu1/wp2/004/working/scripts/ewascatalog2/settings.env
SETTINGS=../settings.env

CMD="$1"

USER_ID=`id -u`
GROUP_ID=`id -g`
DOCKER_COMPOSE="FILES_DIR=${FILES_DIR} USER_ID=${USER_ID} GROUP_ID=${GROUP_ID} docker-compose"

install_website() {
    bash website/install.sh ${WEBSITE_DIR} ${FILES_DIR} ${SETTINGS}
}
copy_webserver() {
    cp -r webserver ${WEBSITE_DIR}
}
copy_docker() {
    cp docker/Dockerfile docker/*.yml docker/*.txt docker/*.r ${WEBSITE_DIR}
}
build_catalog() {
    install_website
    copy_docker
    copy_webserver
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} build"
}
start_catalog() {
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} up -d"
}
create_database() {
    cp -r database ${WEBSITE_DIR}
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} exec web bash -c 'cd /code/database; bash create-annotations.sh /files'"
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} exec db bash -c 'cd /code/database; bash create.sh ../settings.env /files'"
}
update_website() {
    install_website
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} restart web"
}
update_webserver() {
    cp -r webserver ${WEBSITE_DIR}
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} stop nginx"
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} build nginx"
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} start nginx"
}
update_database() {
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} exec web bash -c 'cd /code/database; bash generate-zenodo-doi.sh ../settings.env /files'"
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} exec db bash -c 'cd /code/database; bash add-to-ewas.sh ../settings.env /files'"
}
prep_inhouse_data() {
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} exec web bash -c 'cd /code/database; bash prep-inhouse-data.sh ../settings.env /files'"
}
check_new_upload() {
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} exec web bash -c 'cd /code/database; bash prep-new-data.sh ../settings.env /files'"
}
stop_catalog() {
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} stop"
}
delete_catalog() {
    cd ${WEBSITE_DIR}; eval "${DOCKER_COMPOSE} rm"
}


if [ ${CMD} = "build" ]; then
    build_catalog
elif [ ${CMD} = "start" ]; then
    start_catalog
elif [ ${CMD} = "create-database" ]; then
    create_database
elif [ ${CMD} = "update-website" ]; then
    update_website
elif [ ${CMD} = "update-webserver" ]; then
    update_webserver
elif [ ${CMD} = "update-database" ]; then
    update_database
elif [ ${CMD} = "prep-inhouse-data" ]; then
    prep_inhouse_data
elif [ ${CMD} = "check-new-upload" ]; then
    check_new_upload
elif [ ${CMD} = "stop" ]; then
    stop_catalog
elif [ ${CMD} = "rm" ]; then
    delete_catalog
elif [ ${CMD} = "all" ]; then
    build_catalog
    start_catalog
    create_database
else
cat <<EOF
Error: Invalid command

Usage: 
    catalog CMD
where CMD is one of the following:
    build:            build the catalog docker container
    start:            start the catalog running
    create-database:  construct the catalog database
    update-website:   copy the website files and restart the website
    update-database:  add associations to the database
    update-webserver: copy the webserver files and restart webserver
    stop:             stop the catalog
    rm:               delete catalog container
    all:              build->start->create-database
EOF
fi

## to delete *all* docker containers and images:
##    docker system prune -a
